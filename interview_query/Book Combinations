You have store credit of 

N dollars. However, you don’t want to walk a long distance with heavy books, but you want to spend all of your store credit.

Let’s say we have a list of books in the format of tuples where the first value is the price and the second value is the weight of the book -> (price,weight).

Write a function optimal_books to retrieve the combination that allows you to spend all of your store credit while getting at least two books at the lowest weight.

Note: You should spend all your credit and getting at least 2 books, If no such condition is satisfied just return empty list.
--------------------------------------------------------------------------------------------------------
def book_combinations(book_list, N):
    result_list = []
    min_weight = sum([book[0] for book in book_list])

    def recursive_traverse(index, remaining_credit, total_weight, choosen_books):
        nonlocal result_list, min_weight
        if remaining_credit == 0 and len(choosen_books) > 1 and total_weight < min_weight:
            result_list = choosen_books
            min_weight = total_weight
        if index >= len(book_list) or remaining_credit < 0 or total_weight > min_weight:
            return
        recursive_traverse(index+1, remaining_credit,
                           total_weight, choosen_books)
        recursive_traverse(index+1, remaining_credit -
                           book_list[index][0], total_weight+book_list[index][1], choosen_books+[book_list[index]])

    recursive_traverse(0, N, 0, [])
    return result_list
